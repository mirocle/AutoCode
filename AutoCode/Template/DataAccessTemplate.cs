// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 10.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutoCode.Template
{
    using System.Data;
    using AutoCode.Config;
    using System;
    
    
    #line 1 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DataAccessTemplate : DataAccessTemplateBase
    {
        public virtual string TransformText()
        {
            this.Write("\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing C" +
                    "ore.DataAccess;\r\n");
            
            #line 11 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"

	if(NameSpace =="")
	{

            
            #line default
            #line hidden
            this.Write("using Common;\r\n\r\nnamespace DataAccess\r\n");
            
            #line 18 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"

	}
	else
	{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 23 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write(".Common;\r\n\r\nnamespace ");
            
            #line 25 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            
            #line default
            #line hidden
            this.Write(".DataAccess\r\n");
            
            #line 26 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("{\r\n\tpublic partial class ");
            
            #line 30 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AccessClassName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\t#region GetByID\r\n\r\n\t\t/// <summary>\r\n\t\t/// 取得实体\r\n\t\t/// </summary>\r\n\t\t/// <" +
                    "param name=\"id\">实体关键字</param>\r\n\t\t/// <returns></returns>\r\n\t\tpublic static ");
            
            #line 39 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityClassName));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 39 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReTableName));
            
            #line default
            #line hidden
            this.Write("ByID(");
            
            #line 39 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryColunm[1]));
            
            #line default
            #line hidden
            this.Write(" id)\r\n\t\t{\r\n\t\t\tstring strSQL = \"SELECT * FROM \" + ");
            
            #line 41 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableClassName));
            
            #line default
            #line hidden
            this.Write(".C_TABLENAME;\r\n\t\t\tWhereBuilder wb = new WhereBuilder(strSQL);\r\n\t\t\twb.AddAndCondit" +
                    "ion(");
            
            #line 43 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableClassName));
            
            #line default
            #line hidden
            this.Write(".C_");
            
            #line 43 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryColunm[0]));
            
            #line default
            #line hidden
            this.Write(", SQLOperator.Equal, id);\r\n\t\t\treturn DataAccessCommon.SelectSingle<");
            
            #line 44 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityClassName));
            
            #line default
            #line hidden
            this.Write(">(wb);\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\r\n\t\t#region GetAll\r\n\r\n\t\t/// <summary>\r\n\t\t/// 获取所有数据\r" +
                    "\n\t\t/// </summary>\r\n\t\t/// <returns>所有数据集合</returns>\r\n\t\tpublic static DataSet Get");
            
            #line 55 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReTableName));
            
            #line default
            #line hidden
            this.Write("All()\r\n\t\t{\r\n\t\t\tstring strSQL = \"SELECT * FROM \" + ");
            
            #line 57 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableClassName));
            
            #line default
            #line hidden
            this.Write(@".C_TABLENAME;
			return DataAccessCommon.SelectDataSet(strSQL);
		}

		#endregion

		#region GetByCondition

		/// <summary>
		/// 根据Condition获取DS
		/// </summary>
		/// <returns>所有数据集合</returns>
		public static DataSet GetDSByCondition(string strCondition)
		{
			string strSQL = ""SELECT * FROM "" + ");
            
            #line 71 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableClassName));
            
            #line default
            #line hidden
            this.Write(@".C_TABLENAME;
			WhereBuilder wb = new WhereBuilder(strSQL);
			wb.AddCondition(strCondition);
			return DataAccessCommon.SelectDataSet(wb);
		}

		/// <summary>
		/// 根据Condition获取实体集合
		/// </summary>
		/// <param name=""strCondition"">SQL条件</param>
		/// <returns>实体集合</returns>
		public static List<");
            
            #line 82 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityClassName));
            
            #line default
            #line hidden
            this.Write("> GetByCondition(string strCondition)\r\n\t\t{\r\n\t\t\tstring strSQL = \"SELECT * FROM \" +" +
                    " ");
            
            #line 84 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableClassName));
            
            #line default
            #line hidden
            this.Write(".C_TABLENAME;\r\n\t\t\tWhereBuilder wb = new WhereBuilder(strSQL);\r\n\t\t\twb.AddCondition" +
                    "(strCondition);\r\n\t\t\treturn DataAccessCommon.Select<");
            
            #line 87 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityClassName));
            
            #line default
            #line hidden
            this.Write(">(wb);\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\t}\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 94 "E:\MyProject\AutoCode\AutoCode\Template\DataAccessTemplate.tt"


		public string NameSpace
		{
			set;
			get;
		}

        public string TableName
        {
			set;
            get;
        }

        public DataTable DtColunms
        {
			set;
            get;
        }

        public string AccessClassName
        {
            get
            {
                return TableName.Replace("_", "") + "DA";
            }
        }

        public string EntityClassName
        {
            get
            {
                return TableName.Replace("_", "") + "Entity";
            }
        }

        public string TableClassName
        {
            get
            {
                 return TableName.Replace("_", "") + "Table";
            }
        }

        public string ReTableName
        {
            get
            {
                 return TableName.Replace("_", "");
            }
        }

        public string[] PrimaryColunm
        {
            get
            {
                string[] colum = new string[2];
                DataRow[] KeyRow = DtColunms.Select("ISPkID='1'");

                if (KeyRow.Length > 0)
                {
                    colum[0] = KeyRow[0]["ColunmName"].ToString();
                    colum[1] = Config.ConvertDbType(KeyRow[0]["TypeName"].ToString());
                }
                else
                {
                    colum[0] = DtColunms.Rows[0]["ColunmName"].ToString();
                    colum[0] = Config.ConvertDbType(DtColunms.Rows[0]["TypeName"].ToString());
                }
				return colum;
            }
        }



        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class DataAccessTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
